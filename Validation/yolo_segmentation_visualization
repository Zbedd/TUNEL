import sys
import random
import matplotlib.pyplot as plt

# -------------------------------------------------------------------------
# CONFIG –- tweak these two lines whenever you run the script
sample_size = 10          # set to None to plot every file
method       = 'yolo'     # 'yolo' (default) or 'otsu'
# -------------------------------------------------------------------------

# Make package importable
module_dir = r"C:/VScode/TUNEL/"
if module_dir not in sys.path:
    sys.path.insert(0, module_dir)

from tunel_quant import labeling, local_io

input_folder  = r"C:/VScode/TUNEL/Validation/nd2"
output_folder = r"C:/VScode/TUNEL/Validation/output"


def process_and_plot(in_folder, out_folder, n_images=None, seg_method='yolo'):
    # pull every ND2 file in the folder
    images = local_io.pull_nd2_images(in_folder)

    # down-select if the user asked for a subset
    if n_images is not None and n_images < len(images):
        images = random.sample(images, n_images)

    n_files = len(images)
    fig, axes = plt.subplots(n_files, 2, figsize=(10, 5 * n_files))

    # ensure axes is a 2-D list even when n_files == 1
    if n_files == 1:
        axes = [axes]

    for idx, (name, dapi, fitc) in enumerate(images):
        labels, stats, binary = labeling.label_nuclei(
            dapi,
            remove_large_outliers=True,
            remove_small_outliers=True,
            return_binary=True,
            method=seg_method
        )

        # left: labelled nuclei
        ax_labels = axes[idx][0]
        ax_labels.imshow(labels, cmap='gray')
        ax_labels.set_title(f"{name} – {seg_method}")
        ax_labels.axis('off')

        # right: binary mask
        ax_binary = axes[idx][1]
        ax_binary.imshow(binary, cmap='gray')
        ax_binary.set_title(f"{name} (binary)")
        ax_binary.axis('off')

    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    process_and_plot(input_folder, output_folder,
                     n_images=sample_size, seg_method=method)
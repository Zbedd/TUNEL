"""
validate_segmentation.py  (no-group fallback)
---------------------------------------------
Shows a random subset of ND2 images in napari with:
    • raw DAPI image
    • segmentation labels
    • binary mask
    
    
NEXT STEPS
    • Integrate otsu and YOLO segmentation methods, potentially generating otsu through iteration. New function: label_nuclei_integrated
    • First, should integrate label_nuclei and label_nuclei_basic into a single, modular function.

"""

import sys
import random
import warnings
import numpy as np
import napari

# Mute the clesperanto CUDA experimental warning spam
warnings.filterwarnings(
    "ignore",
    message=r".*clesperanto's cupy / CUDA backend is experimental.*",
    category=UserWarning
)

# -----------------------------------------------------------------
# CONFIG – change these before each run
sample_size = 10          # set None to load every file
method       = 'yolo'     # 'yolo' | 'otsu'
input_folder = "G:/My Drive/KatzLab/TUNEL staining/Caitlin's Files/Raw nd2 Images"
# -----------------------------------------------------------------

# Make tunel_quant importable
module_dir = r"C:/VScode/TUNEL/"
if module_dir not in sys.path:
    sys.path.insert(0, module_dir)

from tunel_quant import labeling, local_io, preprocessing



def load_and_segment(folder, n_images=None, seg_method='yolo'):
    """Load ND2 files, subsample, run label_nuclei."""
    images = local_io.pull_nd2_images(folder)
    if n_images is not None and n_images < len(images):
        images = random.sample(images, n_images)

    out = []
    for name, dapi, fitc in images:
        prepped_dapi = preprocessing.preprocess_dapi(dapi)
        labels, stats, binary = labeling.label_nuclei(
            prepped_dapi,
            remove_large_outliers=False,
            remove_small_outliers=False,
            method=seg_method,
            return_binary=True,
            iterate = False
        )
        out.append((name, dapi, labels, binary))
    return out


def launch_napari(processed, seg_method='yolo'):
    """Open napari viewer and add layers (no groups)."""
    viewer = napari.Viewer()
    for name, dapi, labels, binary in processed:
        prefix = f"{name} |"

        viewer.add_image(
            dapi,
            name=f"{prefix} DAPI",
            colormap='gray',
        )
        viewer.add_labels(
            labels,
            name=f"{prefix} labels ({seg_method})"
        )
        viewer.add_image(
            binary.astype(np.uint8),
            name=f"{prefix} binary",
            colormap='gray',
            blending='additive'
        )

    napari.run()          # non-blocking inside VS Code


if __name__ == "__main__":
    images_proc = load_and_segment(
        input_folder,
        n_images=sample_size,
        seg_method=method
    )
    launch_napari(images_proc, seg_method=method)